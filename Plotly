import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the SpaceX launch data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a Dash application
app = dash.Dash(__name__)

# Create the app layout
app.layout = html.Div(children=[
    html.H1('SpaceX Launch Records Dashboard',
            style={'textAlign': 'center', 'color': '#503D36', 'font-size': 40}),
    
    # Launch Site Dropdown
    dcc.Dropdown(id='site-dropdown',
                 options=[
                     {'label': 'All Sites', 'value': 'ALL'},
                     {'label': 'site1', 'value': 'site1'},
                     {'label': 'site2', 'value': 'site2'},
                     {'label': 'site3', 'value': 'site3'},
                     {'label': 'site4', 'value': 'site4'},
                 ],
                 value='ALL',
                 placeholder="Select a Launch Site here",
                 searchable=True),
    html.Br(),

    # Pie chart for success/failure count
    html.Div(dcc.Graph(id='success-pie-chart')),
    html.Br(),

    # Payload range slider
    html.P("Payload range (Kg):"),
    dcc.RangeSlider(id='payload-slider',
                    min=0, max=10000, step=1000,
                    marks={0: '0',
                           1000: '1000',
                           2000: '2000',
                           3000: '3000',
                           4000: '4000',
                           5000: '5000',
                           6000: '6000',
                           7000: '7000',
                           8000: '8000',
                           9000: '9000',
                           10000: '10000'},
                    value=[min_payload, max_payload]),

    # Scatter plot for correlation between payload and success
    html.Div(dcc.Graph(id='success-payload-scatter-chart')),
])

# Callback function for the success-pie-chart
@app.callback(
    Output('success-pie-chart', 'figure'),
    [Input('site-dropdown', 'value')]
)
def update_pie_chart(launch_site):
    if launch_site == 'ALL':
        # If 'All Sites' is selected, show overall success/failure count
        pie_data = spacex_df.groupby('class').size().reset_index(name='count')
        pie_chart = px.pie(pie_data, names='class', values='count', title='Success vs Failure for All Sites')
    else:
        # If a specific site is selected, filter the data for that site
        site_data = spacex_df[spacex_df['Launch Site'] == launch_site]
        pie_data = site_data.groupby('class').size().reset_index(name='count')
        pie_chart = px.pie(pie_data, names='class', values='count', title=f'Success vs Failure for {launch_site}')
    
    return pie_chart

# Callback function for the success-payload-scatter-chart
@app.callback(
    Output('success-payload-scatter-chart', 'figure'),
    [Input('site-dropdown', 'value'),
     Input('payload-slider', 'value')]
)
def update_scatter_chart(launch_site, payload_range):
    min_payload, max_payload = payload_range
    # Filter the data based on selected payload range
    filtered_df = spacex_df[(spacex_df['Payload Mass (kg)'] >= min_payload) & 
                            (spacex_df['Payload Mass (kg)'] <= max_payload)]
    
    if launch_site != 'ALL':
        # If a specific site is selected, filter the data further by the launch site
        filtered_df = filtered_df[filtered_df['Launch Site'] == launch_site]
    
    # Create scatter chart for payload vs success
    scatter_chart = px.scatter(filtered_df, x='Payload Mass (kg)', y='class', 
                               title='Payload vs Success for Selected Criteria', 
                               labels={'class': 'Success/Failure', 'Payload Mass (kg)': 'Payload Mass (kg)'},
                               color='class')
    return scatter_chart

# Run the app
if __name__ == '__main__':
    app.run_server()
